-- FreeFem++ v4.400003 (jeu. 12 dΓ©c. 2019 13:58:15 - git v4.4-3-9-gc37e08e1)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : real [int] errorH1(7);
    2 : real [int] errorH0(7);
    3 : real [int] errorP(7);
    4 : real [int] h(7);
    5 : real epsilon=1.0e-6;
    6 :
    7 : func u1=-sin(x*y)*x;
    8 : func u2=sin(x*y)*y;
    9 : func p=cos(x*y)-0.9460830703671845;
   10 :
   11 : func sol1x=-(cos(x*y)*x*y)-sin(x*y);
   12 : func sol2y=(cos(x*y)*x*y)+sin(x*y);
   13 :
   14 : func fx=-sin(x*y)*x*(x^2+y^2)+2.0*cos(x*y)*y-sin(x*y)*y;
   15 : func fy=sin(x*y)*y*(x^2+y^2)-2.0*cos(x*y)*x-sin(x*y)*x;
   16 :
   17 :
   18 : int n=1;
   19 :
   20 : for(int i=0; i<6; i++){
   21 :
   22 :
   23 : mesh Th = square(n,n);
   24 : plot(Th,wait=true);
   25 :
   26 : fespace Vh(Th, P2b);
   27 : Vh uh1,uh2;
   28 : Vh w1, w2;
   29 :
   30 : fespace Xh(Th, P2);
   31 : Xh ph, qh;
   32 :
   33 :
   34 : problem Stokes(uh1,uh2,ph,w1,w2,qh, solver=Crout)
   35 : =int2d(Th)(
   36 :  dx(uh1)*dx(w1)
   37 : +dy(uh1)*dy(w1)
   38 : +dx(uh2)*dx(w2)
   39 : +dy(uh2)*dy(w2))
   40 : -int2d(Th)(ph*(dx(w1)+dy(w2)))
   41 : -int2d(Th)(qh*(dx(uh1)+dy(uh2)))
   42 : +int2d(Th)(epsilon*ph*qh)
   43 :
   44 : +int2d(Th)(
   45 : -fx*w1-fy*w2
   46 : )
   47 :
   48 : +on(1,4, uh1=0, uh2=0)
   49 : +on(2, uh1=-sin(y), uh2=y*sin(y))
   50 : +on(3, uh1=-x*sin(x), uh2=sin(x));
   51 :
   52 : Stokes;
   53 :
   54 :
   55 : plot([uh1,uh2],ph,wait=true);
   56 :
   57 :
   58 : errorH0[i]=sqrt(int2d(Th)((u1-uh1)^2+(u2-uh2)^2));
   59 : errorH1[i]=sqrt(int2d(Th)((u1-uh1)*(u1-uh1)+(u2-uh2)*(u2-uh2))+int2d(Th)((dx(uh1)-sol1x)*(dx(uh1)-sol1x)+(dy(uh2U3ht)-sol2y)*(dy(uh2)-sol2y)));
   60 : errorP[i]=sqrt(int2d(Th)((ph-p)*(ph-p)));
   61 :
   62 :
   63 : n=2*n;
   64 : }
   65 :
   66 :
   67 : for(int i=0; i<5; i++){
   68 : cout<<"error for u with H0-norm = "<<errorH0[i]<<endl;
   69 : }
   70 : cout<<"-------------------------------------------------
  ... : "<<endl;
   71 : for(int i=0; i<5; i++){
   72 : cout<<"error for u with H1-norm = "<<errorH1[i]<<endl;
   73 : }
   74 : cout<<"-------------------------------------------------
  ... : "<<endl;
   75 : for(int i=0; i<5; i++){
   76 : cout<<"error for p with H0-norm = "<<errorP[i]<<endl;
   77 : }
   78 : cout<<"-------------------------------------------------
  ... : "<<endl;
   79 : for(int i=1; i<5; i++){
   80 :
   81 : cout<<"error order for u with H0-norm = "<<log(errorH0[i]/errorH0[i+1])/log(2.)<<endl;
   82 : cout<<"error order for u with H1-norm = "<<log(errorH1[i]/errorH1[i+1])/log(2.)<<endl;
   83 : cout<<"error order for p with H0-norm = "<<log(errorP[i]/errorP[i+1])/log(2.)<<endl;
   84 : cout<<"-------------------------------------------------
  ... : "<<endl;
   85 : }
   86 :
   87 :  sizestack + 1024 =4268  ( 3244 )
 
  -- Square mesh : nb vertices  =4 ,  nb triangles = 2 ,  nb boundary edges 4
  SkyLineMatrix: size pL/pU: 31 344 344 moy=11.0968
  -- Solve :
          min -0.841471  max -3.09589e-32
          min -5.44001e-32  max 0.841471
          min -0.782161  max 0.782161
freeglut (ffglut.exe): fgInitGL2: fghGenBuffers is NULL
  -- Square mesh : nb vertices  =9 ,  nb triangles = 8 ,  nb boundary edges 8
  SkyLineMatrix: size pL/pU: 91 1638 1638 moy=18
  -- Solve :
          min -0.841471  max -1.46392e-33
          min -3.46178e-32  max 0.841471
          min -0.37041  max 0.286796
  -- Square mesh : nb vertices  =25 ,  nb triangles = 32 ,  nb boundary edges 16
  SkyLineMatrix: size pL/pU: 307 9432 9432 moy=30.7231
  -- Solve :
          min -0.841471  max -7.47889e-34
          min -1.19649e-32  max 0.841471
          min -0.397685  max 0.167325
  -- Square mesh : nb vertices  =81 ,  nb triangles = 128 ,  nb boundary edges 32
  SkyLineMatrix: size pL/pU: 1123 60256 60256 moy=53.6563
  -- Solve :
          min -0.841471  max -1.00812e-34
          min -4.90754e-33  max 0.841471
          min -0.4038  max 0.0960123
  -- Square mesh : nb vertices  =289 ,  nb triangles = 512 ,  nb boundary edges 64
  SkyLineMatrix: size pL/pU: 4291 426625 426625 moy=99.4232
  -- Solve :
          min -0.841471  max -1.47382e-35
          min -2.29696e-33  max 0.841471
          min -0.405291  max 0.0666216
  -- Square mesh : nb vertices  =1089 ,  nb triangles = 2048 ,  nb boundary edges 128
  SkyLineMatrix: size pL/pU: 16771 3200523 3200523 moy=190.837
  -- Solve :
          min -0.841471  max -1.96437e-36
          min -1.12946e-33  max 0.841471
          min -0.405662  max 0.0573916
error for u with H0-norm = 0.0133083
error for u with H0-norm = 0.00286382
error for u with H0-norm = 0.000444703
error for u with H0-norm = 6.1976e-05
error for u with H0-norm = 8.13841e-06
-------------------------------------------------
error for u with H1-norm = 0.0779943
error for u with H1-norm = 0.029791
error for u with H1-norm = 0.0086622
error for u with H1-norm = 0.00226646
error for u with H1-norm = 0.000567169
-------------------------------------------------
error for p with H0-norm = 0.189222
error for p with H0-norm = 0.0678911
error for p with H0-norm = 0.0249332
error for p with H0-norm = 0.00816786
error for p with H0-norm = 0.00229756
-------------------------------------------------
error order for u with H0-norm = 2.68703
error order for u with H1-norm = 1.78207
error order for p with H0-norm = 1.44516
-------------------------------------------------
error order for u with H0-norm = 2.84306
error order for u with H1-norm = 1.93429
error order for p with H0-norm = 1.61004
-------------------------------------------------
error order for u with H0-norm = 2.92889
error order for u with H1-norm = 1.99859
error order for p with H0-norm = 1.82985
-------------------------------------------------
error order for u with H0-norm = 2.9741
error order for u with H1-norm = 2.00911
error order for p with H0-norm = 1.93012
-------------------------------------------------
times: compile 0.215s, execution 5.102s,  mpirank:0
 try getConsole C:\Users\sakis\Desktop\FreeFemCodes\Correct Codes\Παράδειγμα 4\Mini\Mini P2b.P2 (corner flow).edp
