-- FreeFem++ v4.400003 (jeu. 12 dΓ©c. 2019 13:58:15 - git v4.4-3-9-gc37e08e1)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : real [int] errorH1(7);
    2 : real [int] errorH0(7);
    3 : real [int] errorP(7);
    4 : real [int] h(7);
    5 : real epsilon=1.0e-6;
    6 :
    7 : func u1=-sin(x*y)*x;
    8 : func u2=sin(x*y)*y;
    9 : func p=cos(x*y)-0.9460830703671845;
   10 :
   11 : func sol1x=-(cos(x*y)*x*y)-sin(x*y);
   12 : func sol2y=(cos(x*y)*x*y)+sin(x*y);
   13 :
   14 : func fx=-sin(x*y)*x*(x^2+y^2)+2.0*cos(x*y)*y-sin(x*y)*y;
   15 : func fy=sin(x*y)*y*(x^2+y^2)-2.0*cos(x*y)*x-sin(x*y)*x;
   16 :
   17 :
   18 : int n=1;
   19 :
   20 : for(int i=0; i<7; i++){
   21 :
   22 :
   23 : mesh Th = square(n,n);
   24 : plot(Th,wait=true);
   25 :
   26 : fespace Vh(Th, P2);
   27 : Vh uh1,uh2;
   28 : Vh w1, w2;
   29 :
   30 : fespace Xh(Th, P1);
   31 : Xh ph, qh;
   32 :
   33 :
   34 : problem Stokes(uh1,uh2,ph,w1,w2,qh, solver=Crout)
   35 : =int2d(Th)(
   36 :  dx(uh1)*dx(w1)
   37 : +dy(uh1)*dy(w1)
   38 : +dx(uh2)*dx(w2)
   39 : +dy(uh2)*dy(w2))
   40 : -int2d(Th)(ph*(dx(w1)+dy(w2)))
   41 : -int2d(Th)(qh*(dx(uh1)+dy(uh2)))
   42 : +int2d(Th)(epsilon*ph*qh)
   43 :
   44 : +int2d(Th)(
   45 : -fx*w1-fy*w2
   46 : )
   47 :
   48 : +on(1,4, uh1=0, uh2=0)
   49 : +on(2, uh1=-sin(y), uh2=y*sin(y))
   50 : +on(3, uh1=-x*sin(x), uh2=sin(x));
   51 :
   52 : Stokes;
   53 :
   54 :
   55 : plot([uh1,uh2],ph,wait=true);
   56 :
   57 :
   58 : errorH0[i]=sqrt(int2d(Th)((u1-uh1)^2+(u2-uh2)^2));
   59 : errorH1[i]=sqrt(int2d(Th)((u1-uh1)*(u1-uh1)+(u2-uh2)*(u2-uh2))+int2d(Th)((dx(uh1)-sol1x)*(dx(uh1)-sol1x)+(dy(uh2)-sol2y)*(dy(uh2)-sol2y)));
   60 : errorP[i]=sqrt(int2d(Th)((ph-p)*(ph-p)));
   61 :
   62 :
   63 : n=2*n;
   64 : }
   65 :
   66 :
   67 : for(int i=0; i<6; i++){
   68 : cout<<"error for u with H0-norm = "<<errorH0[i]<<endl;
   69 : }
   70 : cout<<"-------------------------------------------------
  ... : "<<endl;
   71 : for(int i=0; i<6; i++){
   72 : cout<<"error for u with H1-norm = "<<errorH1[i]<<endl;
   73 : }
   74 : cout<<"-------------------------------------------------
  ... : "<<endl;
   75 : for(int i=0; i<6; i++){
   76 : cout<<"error for p with H0-norm = "<<errorP[i]<<endl;
   77 : }
   78 : cout<<"-------------------------------------------------
  ... : "<<endl;
   79 : for(int i=1; i<6; i++){
   80 :
   81 : cout<<"error order for u with H0-norm = "<<log(errorH0[i]/errorH0[i+1])/log(2.)<<endl;
   82 : cout<<"error order for u with H1-norm = "<<log(errorH1[i]/errorH1[i+1])/log(2.)<<endl;
   83 : cout<<"error order for p with H0-norm = "<<log(errorP[i]/errorP[i+1])/log(2.)<<endl;
   84 : cout<<"-------------------------------------------------
  ... : "<<endl;
   85 : }
   86 :
   87 :  sizestack + 1024 =4268  ( 3244 )
 
  -- Square mesh : nb vertices  =4 ,  nb triangles = 2 ,  nb boundary edges 4
  SkyLineMatrix: size pL/pU: 22 182 182 moy=8.27273
  -- Solve :
          min -0.841471  max -2.65506e-32
          min -2.65506e-32  max 0.841471
          min -0.187965 freeglut (ffglut.exe): fgInitGL2: fghGenBuffers is NULL
 max 0.187965
  -- Square mesh : nb vertices  =9 ,  nb triangles = 8 ,  nb boundary edges 8
  SkyLineMatrix: size pL/pU: 59 776 776 moy=13.1525
  -- Solve :
          min -0.841471  max -2.99081e-33
          min -1.28026e-32  max 0.841471
          min -0.32981  max 0.133613
  -- Square mesh : nb vertices  =25 ,  nb triangles = 32 ,  nb boundary edges 16
  SkyLineMatrix: size pL/pU: 187 4174 4174 moy=22.3209
  -- Solve :
          min -0.841471  max -2.226e-33
          min -6.34843e-33  max 0.841471
          min -0.391258  max 0.0665738
  -- Square mesh : nb vertices  =81 ,  nb triangles = 128 ,  nb boundary edges 32
  SkyLineMatrix: size pL/pU: 659 25425 25425 moy=38.5812
  -- Solve :
          min -0.841471  max -3.27076e-34
          min -4.16631e-33  max 0.841471
          min -0.402434  max 0.0562154
  -- Square mesh : nb vertices  =289 ,  nb triangles = 512 ,  nb boundary edges 64
  SkyLineMatrix: size pL/pU: 2467 176368 176368 moy=71.4909
  -- Solve :
          min -0.841471  max -4.07335e-35
          min -2.20582e-33  max 0.841471
          min -0.40497  max 0.0543728
  -- Square mesh : nb vertices  =1089 ,  nb triangles = 2048 ,  nb boundary edges 128
  SkyLineMatrix: size pL/pU: 9539 1295316 1295316 moy=135.792
  -- Solve :
          min -0.841471  max -5.08578e-36
          min -1.11819e-33  max 0.841471
          min -0.405583  max 0.0540157
  -- Square mesh : nb vertices  =4225 ,  nb triangles = 8192 ,  nb boundary edges 256
  SkyLineMatrix: size pL/pU: 37507 9908861 9908861 moy=264.187
  -- Solve :
          min -0.841471  max -6.34856e-37
          min -5.61004e-34  max 0.841471
          min -0.405735  max 0.0539403
error for u with H0-norm = 0.0175401
error for u with H0-norm = 0.00272179
error for u with H0-norm = 0.00035703
error for u with H0-norm = 4.54853e-05
error for u with H0-norm = 5.73299e-06
error for u with H0-norm = 7.18958e-07
-------------------------------------------------
error for u with H1-norm = 0.127014
error for u with H1-norm = 0.0391941
error for u with H1-norm = 0.0104632
error for u with H1-norm = 0.00266836
error for u with H1-norm = 0.000670905
error for u with H1-norm = 0.000167984
-------------------------------------------------
error for p with H0-norm = 0.0882965
error for p with H0-norm = 0.0190594
error for p with H0-norm = 0.00357104
error for p with H0-norm = 0.000854758
error for p with H0-norm = 0.000212506
error for p with H0-norm = 5.30878e-05
-------------------------------------------------
error order for u with H0-norm = 2.93044
error order for u with H1-norm = 1.90531
error order for p with H0-norm = 2.41608
-------------------------------------------------
error order for u with H0-norm = 2.97257
error order for u with H1-norm = 1.9713
error order for p with H0-norm = 2.06276
-------------------------------------------------
error order for u with H0-norm = 2.98804
error order for u with H1-norm = 1.99177
error order for p with H0-norm = 2.00801
-------------------------------------------------
error order for u with H0-norm = 2.99531
error order for u with H1-norm = 1.99778
error order for p with H0-norm = 2.00105
-------------------------------------------------
error order for u with H0-norm = 2.94739
error order for u with H1-norm = 1.99942
error order for p with H0-norm = 1.99986
-------------------------------------------------
times: compile 0.251s, execution 7.117s,  mpirank:0
 try getConsole C:\Users\sakis\Desktop\FreeFemCodes\Correct Codes\Παράδειγμα 4\Taylor-Hood\Taylor-Hood P2.P1 (corner flow).edp
