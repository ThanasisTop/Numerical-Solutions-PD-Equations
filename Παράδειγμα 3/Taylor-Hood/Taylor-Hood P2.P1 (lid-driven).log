-- FreeFem++ v4.400003 (jeu. 12 dΓ©c. 2019 13:58:15 - git v4.4-3-9-gc37e08e1)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : real [int] errorH1(7);
    2 : real [int] errorH0(7);
    3 : real [int] errorP(7);
    4 : real [int] h(7);
    5 : real epsilon=1.0e-6;
    6 :
    7 :
    8 : func u1=(x^4-2.0*x^3+x^2)*(2.0*y^3-y);
    9 : func u2=-(2.0*x^3-3.0*x^2+x)*(y^4-y^2);
   10 :
   11 : func p=(4.0*x^3-6.0*x^2+2.0*x)*(2.0*y^3-y)+0.4*(6.0*x^5-15.0*x^4+10.0*x^3)*y-0.1;
   12 :
   13 : func fx=0;
   14 : func fy=(12.0*x-6.0)*(y^4-y^2)+(8.0*x^3-12.0*x^2+4.0*x)*(6.0*y^2-1.0)+0.4*(6.0*x^5-15.0*x^4+10.0*x^3);
   15 :
   16 : func sol1x=(4.0*x^3-6.0*x^2+2.0*x)*(2.0*y^3-y);
   17 : func sol2y=-(2.0*x^3-3.0*x^2+x)*(4.0*y^3-2.0*y);
   18 :
   19 : int n=1;
   20 :
   21 : for(int i=0; i<7; i++){
   22 :
   23 :
   24 : mesh Th = square(n,n);
   25 : plot(Th,wait=true);
   26 :
   27 : fespace Vh(Th, P2);
   28 : Vh uh1,uh2;
   29 : Vh w1, w2;
   30 :
   31 : fespace Xh(Th, P1);
   32 : Xh ph, qh;
   33 :
   34 : problem Stokes(uh1,uh2,ph,w1,w2,qh, solver=Crout)
   35 : =int2d(Th)(
   36 :  dx(uh1)*dx(w1)
   37 : +dy(uh1)*dy(w1)
   38 : +dx(uh2)*dx(w2)
   39 : +dy(uh2)*dy(w2))
   40 : -int2d(Th)(ph*(dx(w1)+dy(w2)))
   41 : -int2d(Th)(qh*(dx(uh1)+dy(uh2)))
   42 : +int2d(Th)(qh*ph)
   43 :
   44 : +int2d(Th)(
   45 : -fx*w1-fy*w2
   46 : )
   47 :
   48 :
   49 : +on(3, uh1=x^4-2.0*x^3+x^2,uh2=0)
   50 : +on(1,2,4, uh1=u1, uh2=u2);
   51 :
   52 :
   53 : Stokes;
   54 :
   55 :
   56 : plot([uh1,uh2],ph,wait=true);
   57 :
   58 :
   59 :
   60 : errorH0[i]=sqrt(int2d(Th)((u1-uh1)^2+(u2-uh2)^2));
   61 : errorH1[i]=sqrt(int2d(Th)((u1-uh1)*(u1-uh1)+(u2-uh2)*(u2-uh2))
   62 : +int2d(Th)((dx(uh1)-sol1x)*(dx(uh1)-sol1x)+(dy(uh2)-sol2y)*(dy(uh2)-sol2y)));
   63 : errorP[i]=sqrt(int2d(Th)((p-ph)*(p-ph)));
   64 :
   65 :
   66 : n=2*n;
   67 : }
   68 :
   69 : for(int i=0; i<6; i++){
   70 : cout<<"error for u with H0-norm = "<<errorH0[i]<<endl;
   71 : }
   72 : cout<<"-------------------------------------------------
  ... : "<<endl;
   73 : for(int i=0; i<6; i++){
   74 : cout<<"error for u with H1-norm = "<<errorH1[i]<<endl;
   75 : }
   76 : cout<<"-------------------------------------------------
  ... : "<<endl;
   77 : for(int i=0; i<6; i++){
   78 : cout<<"error for p with H0-norm = "<<errorP[i]<<endl;
   79 : }
   80 : cout<<"-------------------------------------------------
  ... : "<<endl;
   81 : for(int i=1; i<6; i++){
   82 :
   83 : cout<<"error order for u with H0-norm = "<<log(errorH0[i]/errorH0[i+1])/log(2.)<<endl;
   84 : cout<<"error order for u with H1-norm = "<<log(errorH1[i]/errorH1[i+1])/log(2.)<<endl;
   85 : cout<<"error order for p with H0-norm = "<<log(errorP[i]/errorP[i+1])/log(2.)<<endl;
   86 : cout<<"-------------------------------------------------
  ... : "<<endl;
   87 :
   88 : }
   89 :  sizestack + 1024 =6268  ( 5244 )
 
  -- Square mesh : nb vertices  =4 ,  nb triangles = 2 ,  nb boundary edges 4
  SkyLineMatrix: size pL/pU: 22 182 182 moy=8.27273
  -- Solve :
          min -1.33267e-32  max 0.0625
          min -3.41601e-32  max 0.00873016
          min -0.20496  max 0.23254
freeglut (ffglut.exe): fgInitGL2: fghGenBuffers is NULL
  -- Square mesh : nb vertices  =9 ,  nb triangles = 8 ,  nb boundary edges 8
  SkyLineMatrix: size pL/pU: 59 776 776 moy=13.1525
  -- Solve :
          min -1.85071e-32  max 0.0625
          min -0.00310758  max 0.0472585
          min -0.287737  max 0.196374
  -- Square mesh : nb vertices  =25 ,  nb triangles = 32 ,  nb boundary edges 16
  SkyLineMatrix: size pL/pU: 187 4174 4174 moy=22.3209
  -- Solve :
          min -0.142424  max 0.240061
          min -0.0876527  max 0.144666
          min -2.90685  max 2.93108
  -- Square mesh : nb vertices  =81 ,  nb triangles = 128 ,  nb boundary edges 32
  SkyLineMatrix: size pL/pU: 659 25425 25425 moy=38.5812
  -- Solve :
          min -3.16915  max 5.11714
          min -2.63816  max 2.62829
          min -56.0662  max 56.9762
  -- Square mesh : nb vertices  =289 ,  nb triangles = 512 ,  nb boundary edges 64
  SkyLineMatrix: size pL/pU: 2467 176368 176368 moy=71.4909
  -- Solve :
          min -56.0871  max 86.8594
          min -46.0337  max 43.7635
          min -931.85  max 927.006
  -- Square mesh : nb vertices  =1089 ,  nb triangles = 2048 ,  nb boundary edges 128
  SkyLineMatrix: size pL/pU: 9539 1295316 1295316 moy=135.792
  -- Solve :
          min -907.782  max 1405.26
          min -746.303  max 711.287
          min -14973.3  max 15040.3
 try getConsole C:\Users\sakis\Desktop\ΣΕΜΦΕ\ΠΤΥΧΙΑΚΗ-Πεπερασμένα Στοιχεια για τις εξισώσεις Navier-Stokes\FreeFem\Stokes Problem\Παράδειγμα 3\Taylor-Hood\Taylor-Hood P2.P1 (lid-driven).edp
